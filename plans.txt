All is divided into 2 sections:
A) how the data is being kept and processed
B) how it is being displayed

Section A

0) Class pv (point or vector)
	> might be a template, but I expect it to be used
	mostly with double (for calculations)
	and int (for rendering, since all pixel coordinates are integers)
	> implement matrix operations

1) Class Canvas:
	> size, backgroung color, origin point and scale value (initializing the coordinate system)
	> 2D-vector of pixels (+struct pixel is needed)
	> final stage before output into png-picture

2) Class Graphic Object (grObj):
	> a common template for any object containing its parameters like pivots, radius, color, thickness or whatever is required
	> circle (as a curve and as a shape), polygon, line, polyline, curve, spline, gradieng, fill (may be some others will be implemented later)

	> objects will be combined in another structure: Set of objects (objSet), storing information about their order on layers 
	> objSet  may be drawn on Image, not directly to png

3) Renderer
	> I think the drawing procedure
	will be individual special for each graphic object


The structure of the project:
		____________________________...
	       /____________
	      /___	   image processing algorithms (to apply to canvas)    ___
	     /	  filters	 _________				  	__\
	    /			/         drawing algorithms (render)	     	   \
	grlib <------------- grObj (+objSet)			<--- pov & canvas (used everywhere)  <-- color (class)
				\__circle				   	__/
				 \________polygon			       __/
				  \_______________...


INF)  Ideas for later options:
	> adding filters
	> functions for lightning edges, color segmentation,
	noise suppresion, bluring the image, may be smth with
	Fourier transformations or SVD
	> adding text on image
	> merging 2 images
	> chromakey
	> plotting
