To do:

0) defining operators for main structures
(in particular: canvas, color(s), grObj, pov)

1) matrix operations with pov

2) graphic objects
	+ drawing algorithms

3) coloring methods








=======================

O) Class pov (point or vector)
	> implement matrix operations

O) struct color: just a compact keeper of R,G,B and alpha values

O) Class Canvas:
	> nothing but a 3D-vector of integers (the 1-st dimension: color channels, the 2-nd and the 3-rd: R-G-B-alpha values)
	> final stage before output into png-picture

	> Canvas will may be interpreted as a layer: canvases could be added up in different order

O) Class Graphic Object (grObj):
	> a common template for any object containing its parameters like pivots, radius, color, thickness or whatever is required
	> circle (as a curve and as a shape), polygon, line, polyline, curve, spline, gradieng, fill (may be some others will be implemented later)
	
	> I think the drawing procedure	will be individual special for each graphic object

O) color_base:
	> a ancestor-class for classes for different ways of coloring (const_color, gradients)

	

The structure of the project:
		____________________________...
	       /____________
	      /___	   image processing algorithms (to apply to canvas)    ___
	     /	  filters	 _________				  	__\
	    /			/         drawing algorithms (render)	     	   \
	grlib <------------- grObj 					<--- pov & canvas (used everywhere)  <-- color (class)
				\__circle				   	__/
				 \________polygon			       __/
				  \_______________...


INF)  Ideas for later options:
	> adding filters
	> functions for lightning edges, color segmentation,
	noise suppresion, bluring the image, may be smth with
	Fourier transformations or SVD
	> adding text on image
	> merging 2 images
	> chromakey
	> plotting
